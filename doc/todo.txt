= TODO =

== Main areas ==

0. l10n for the UI

1. get merging working
  - "FreenetArchiver" extension (see below)
  - get a basic Index interface set up, that is *clean* (ie. nothing fancy for now)

2. Re-design progress / serialisation system
  - Remove "Task" class and make PushTask.data, PullTask.meta fields *final*.
  - re-structure "serialiser" classes
  - Have SkeletonBTreeMap use freenet's async IO interface instead of Threads, 
    which atm do nothing except wait for the IO to finish. This is pointless
    and wastes unnecessary threads. The BlockingQueues should stay, only the
    serialser part needs to be changed.
    - this will need additional asynchronous serialiser methods, instead of just
      push()/pull(), and a class instead of ParallelSerialiser / ObjectProcesser,
      that handles these async calls

3. Clean-up Skeleton*
  - remove unnecessary methods, etc

== Documentation of Quirks and Stuff That Future Programmers Must Know ==

- PRIORITY document TaskComplete handling...

== Serialisation ==

- OPT HIGH have the MapCollectionTranslators generate map VIEWS of data (instead of copies)
- OPT HIGH make getIndex() unblocking
  - use LiveArchiver for index root serialiser
  - use SnoopMetadata (ask toad about it)

- TODO NORM better USK support for the FreenetArchiver, both insert and request
- TODO HIGH make an extension of FreenetArchiver that saves a local copy of a CHK,
  and tries to load from it next time

- OPT LOW should have a better format than having BinInfo point to a top-level CHK
  - use MHK or have metadata directly in the parent node (latter reduces node fan-out to 400-500 max)
- OPT LOW use B+-trees instead of B-trees

== Resource usage ==

- OPT HIGH Memory handling; discard index data after we're done with it, during a user request

== Execution/Progress ==

- FIXME NORM ProgressParts.getSubParts / ProgressParts.getParts: iterating might throw
  ConcurrentModificationException, deal with this!
- FIXME NORM wrap saved TaskAbortExceptions when we throw them again, so we get the right stack traces
  - maybe new class "TaskAbortedException"? too confusing?
  - to find these, search for "throw e", "throw p" or something that's not "throw new"
- TODO verify the synchronization of SimpleProgress, and BaseCompositeProgress...
  - although maybe unnecessary since these should all be single-writer multi-reader
    (and the reads are not critical)?

== Index ==

- HIGH start doing a WriteableIndex and make the ttab protected again.
- Decide whether SkeletonNode really needs to implement SkeletonMap

- LOW adapt SkeletonBTreeMap.inflate() to work for a submap range too. see
  that class for more details.

- LOW make SortedArraySet mutable and into a map, so we can use it instead of TreeMap in BTreeMap.Node
- LOW index: "suggested tokens" - suggest what other people should tag this
  index as; they are free to ignore this suggestion

== TermEntry / URIEntry ==

- (fred-staging) make FreenetURI Comparable so we can use that instead of
  toString().compareTo() in the TermEntry comparisons
- decide whether URIKeys are really necessary...
- LOW there should be only one entry per URI per Token (enforce this in the code at some point)

== Packaging structure ==

- restructure the Serialiser.* stuff
- LOW Skeleton/SkeletonMap does what we need for now, but might able to be generalised a bit

== Misc ==

- LOW use markdown-doclet instead of bliki-doclet
  - not yet - MarkdownJ has bugs relating to parsing of uppercase HTML tags,
    which Std Java Doclet generates, unfortunately :/
- LOW make build.xml output test results better... atm either it has two modes:
  - print test stdout output out in real time, but not stderr
  - print stdout and stderr in a single go after the test is over :/

