= Index =

== TODO ==

- can have terms containing spaces by eg. having crawler add "x y" to its dictionary of
terms to index, if it encounters this combination more than a few times on multiple pages.


- notes for synchronization:

read operations should be able to occur concurrently

put/remove modify the map structurally.
when this is happening, no other operations can happen

deflate/inflate modify the map data but not structure.
deflate/inflate should be able to occur concurrently on different nodes/keys
it should block put/remove operations, but not read operations


tmtab: BTreeMap<String, BTreeSet<TokenEntry>>
utab: BTreeMap<URIKey, BTreeMap<FreenetURI, URIEntry>>



BTreeMap commit algorithm:

have a "modCount" for each node. merge/split/rotate & put/remove update this

WriteableIndex keeps a "node -> modCount" map
at each commit, push all nodes that have a different modCount,
and update the map.



NOTE: stuff below tbhis section is out of data wrt the format of the indexes



== Purpose ==

Internal representation of an index.

== Functionality ==


FetchTokenEntries [term]
ClearTokenEntries [term]

InsertTokenEntry [data]
RemoveTokenEntry [data]

FetchURIEntry [uri]
ClearURIEntry [uri]

InsertURIEntry [data]
RemoveURIEntry [data]

PullIndex [index]
PushIndex [index]


== Format of data ==

(not fully implemented)

=== Index ===

(PTM stands for PrefixTreeMap - see the javadoc for more details.)

 |-- contains
 :   subclass of

Index
 |-- metadata                                                  SSK@X/index-n/index.yml
 |-- utab    Map<URIKey,SortedMap<FreenetURI, URIEntry>> utab  SSK@X/index-n/u*
 |-- tktab   Map<Token,SortedSet<TokenEntry>> tktab            SSK@X/index-n/tk*
 |-- filtab  Map<Token,TokenFilter> filtab                     SSK@X/index-n/fil*

=== Token table ===

A term is a discrete phrase that results are associated with. A Token is the
md5 version of a term, and is used as a key into the token and filter tables.

A TokenEntry stores data about a particular result for a Token.

TokenEntry - has relevance rating (TODO remove quality from the java class)
 : TokenTermEntry - redirects to another search term
 : TokenIndexEntry - redirects to another index
 : TokenURIEntry - final target for term

TokenEntries are stored in tk*.tab*.yml, where tk* is the prefix of the node in
the PTM where its corresponding Token is stored, and tab* is the splitfiles
that the entries are stored under. All TokenEntries for a given Token is
ordered by relevance and stored in this order in a contiguous subset of the
map files, eg. tab13, tab14, tab15.

To aid query retrieval times, for each token, the 16 (or some other number)
most relevant token entries from different sites, have their URIEntry (see
below) stored along with the TokenEntry in the same splitfile, as well as in
the URI table.

=== URI table ===

A URIKey is the routingKey part of a FreenetURI and is used as the key into the
uri table.

URIEntry - has quality rating (TODO code this)
 : etc? TODO

URIEntries are stored in u*.tab*.yml, where u* is the prefix of the node in the
PTM where its corresponding URIKey is stored, and tab* is the splitfiles that
the entries are stored under. All URIEntries for a given URIKey is ordered by
the String form of its corresponding FreenetURI, and stored in this order in a
contiguous subset of the map files, eg. tab13, tab14, tab15.

=== Filter table ===

TODO implement filters, think about how to do this...




=== Search algorithm for a single index ===

parse index.yml
TODO parse filters
parse tk*.yml
parse tk*.map*.yml, display the results to the user

something like:

site A: result 1 [site data]
 - site A: result 2 [site data]
 - (show more results from this site)
site B: result 1 [site data]
site C: result 1 [site data]
site D: result 1 (click to retrieve site data)

in the meantime, keep pulling URIEntry data in the background, and update the
page as necessary.


Results are ordered by relevance^3 * quality. If the URIEntry has not been
loaded yet, we assume the quality is 0.9.
