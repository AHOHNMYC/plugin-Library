= Index =

== Feature ideas ==

- can have terms containing spaces by eg. having crawler add "x y" to its dictionary of
terms to index, if it encounters this combination more than a few times on multiple pages.

- notes for synchronization:

read operations should be able to occur concurrently

put/remove modify the map structurally.
when this is happening, no other operations can happen

deflate/inflate modify the map data but not structure.
deflate/inflate should be able to occur concurrently on different nodes/keys
it should block put/remove operations, but not read operations


== Functionality ==

TODO sort this out

FetchTokenEntries [term]
ClearTokenEntries [term]

InsertTermEntry [data]
RemoveTermEntry [data]

FetchURIEntry [uri]
ClearURIEntry [uri]

InsertURIEntry [data]
RemoveURIEntry [data]

PullIndex [index]
PushIndex [index]






== Data elements ==

A "term" is a discrete phrase that results are associated with. This is just a
Java String, and can contain any character including whitespace.

A TermEntry stores data about a particular result for a term. Each entry has a
subject term and a relevance rating in [0,1]. Further types are:

 : TermTermEntry - redirects to another search term
 : TermIndexEntry - redirects to another index
 : TermPageEntry - final target for term

A URIKey is the node routing-key part of a FreenetURI and is used as the key
into the URI table. FreenetURIs from the same "site" will have the same URIKey
and will be stored close together in the table. (TODO: this might not be
necessary, especially if we use B+-trees instead of B-trees.)

A URIEntry stores data about a particular FreenetURI. Each entry has a quality
rating in [0,1]. Further types are:
 : etc? TODO

=== Unimplemented features ===

At the time of writing, there is no support for terms containing whitespace in
either XMLSpider or the syntax of the queries in the end-user interface.

There is also no support for URIEntrys in the spider or the interface.

== Data structure ==

 |-- contains
 :   subclass of

Index
 |-- metadata
 |-- ttab: BTreeMap<String, BTreeSet<TermEntry>>
 |-- utab: BTreeMap<URIKey, BTreeMap<FreenetURI, URIEntry>>

The index root would usually be stored as an SSK splitfile.

Conceptually, the ttab (term table) structure maps a term to (the collection of
entries for that term), and the utab (URI table) maps a FreenetURI to a single
unique URIEntry.

Structurally, both the ttab and utab are doubly-nested B-trees. There is a top
level B-tree, which maps a key to a further B-tree, which in turn holds data.

For the ttab, the top level B-tree maps a term to its entries collection, which
is a B-tree and can be nagivated. For the utab, the top level B-tree maps a
URIKey to a lower level B-tree that maps a FreenetURI to its URIEntry.


DOCUMENT usage of Bins


== Filters ==

TODO implement filters, think about how to do this...


